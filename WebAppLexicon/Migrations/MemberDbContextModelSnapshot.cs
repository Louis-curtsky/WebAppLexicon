// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppLexicon.Models.Members.Data;

namespace WebAppLexicon.Migrations
{
    [DbContext(typeof(MemberDbContext))]
    partial class MemberDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "20752ede-51cd-4e7e-bdd3-f01c21954cfa",
                            ConcurrencyStamp = "20752ede-51cd-4e7e-bdd3-f01c21954cfa",
                            Name = "SuperAdmin",
                            NormalizedName = "SuperAdmin"
                        },
                        new
                        {
                            Id = "5666cfb4-2952-457c-a9d1-b86e6c650444",
                            ConcurrencyStamp = "5666cfb4-2952-457c-a9d1-b86e6c650444",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "492f65c5-5347-4791-9c40-9672c8524ee9",
                            ConcurrencyStamp = "492f65c5-5347-4791-9c40-9672c8524ee9",
                            Name = "User",
                            NormalizedName = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "39d7cb72-e5bc-4b20-853b-7347807967a4",
                            RoleId = "20752ede-51cd-4e7e-bdd3-f01c21954cfa"
                        },
                        new
                        {
                            UserId = "2e9fbde5-f4d2-4dd6-8792-28952b09e038",
                            RoleId = "5666cfb4-2952-457c-a9d1-b86e6c650444"
                        },
                        new
                        {
                            UserId = "00550930-2568-4d0e-ab1f-959f64204b74",
                            RoleId = "492f65c5-5347-4791-9c40-9672c8524ee9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebAppLexicon.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Stockholm",
                            StateId = 5
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Helsingborg",
                            StateId = 2
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Växjö",
                            StateId = 1
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Gävle",
                            StateId = 4
                        },
                        new
                        {
                            CityId = 5,
                            CityName = "Visby",
                            StateId = 6
                        },
                        new
                        {
                            CityId = 6,
                            CityName = "Berlin",
                            StateId = 7
                        },
                        new
                        {
                            CityId = 7,
                            CityName = "Hamburg",
                            StateId = 9
                        },
                        new
                        {
                            CityId = 9,
                            CityName = "Lund",
                            StateId = 2
                        },
                        new
                        {
                            CityId = 8,
                            CityName = "Munich",
                            StateId = 8
                        },
                        new
                        {
                            CityId = 10,
                            CityName = "Rome",
                            StateId = 10
                        },
                        new
                        {
                            CityId = 11,
                            CityName = "Paris",
                            StateId = 11
                        });
                });

            modelBuilder.Entity("WebAppLexicon.Models.Country", b =>
                {
                    b.Property<int>("CntyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CntyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CntyId");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CntyId = 1,
                            CntyName = "Sweden"
                        },
                        new
                        {
                            CntyId = 2,
                            CntyName = "France"
                        },
                        new
                        {
                            CntyId = 3,
                            CntyName = "Italy"
                        },
                        new
                        {
                            CntyId = 4,
                            CntyName = "Germany"
                        });
                });

            modelBuilder.Entity("WebAppLexicon.Models.Jobs", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsMemberId")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsSkillId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("JobId");

                    b.HasIndex("SkillsMemberId", "SkillsSkillId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("WebAppLexicon.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LangName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LangName = "Swedish"
                        },
                        new
                        {
                            Id = 2,
                            LangName = "English"
                        },
                        new
                        {
                            Id = 3,
                            LangName = "French"
                        },
                        new
                        {
                            Id = 4,
                            LangName = "Chinese"
                        });
                });

            modelBuilder.Entity("WebAppLexicon.Models.Members.Members", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CntyId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryCntyId")
                        .HasColumnType("int");

                    b.Property<int>("CtyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GovId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GovIdType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LangId")
                        .HasColumnType("int");

                    b.Property<int>("LangRead1")
                        .HasColumnType("int");

                    b.Property<int>("LangWrite1")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberApproval")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MemberDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryCntyId");

                    b.HasIndex("StateId");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            MemberId = 1,
                            Age = 30,
                            CntyId = 1,
                            CtyId = 3,
                            Email = "ggurnay0@opera.com",
                            FirstName = "Giustina",
                            Gender = "Genderfluid",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Gurnay",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Panamanian",
                            Phone = "108-553-0832",
                            StateId = 1
                        },
                        new
                        {
                            MemberId = 2,
                            Age = 76,
                            CntyId = 4,
                            CtyId = 7,
                            Email = "dkissick1@clickbank.net",
                            FirstName = "Danita",
                            Gender = "Female",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Kissick",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Iroquois",
                            Phone = "102-688-4545",
                            StateId = 8
                        },
                        new
                        {
                            MemberId = 3,
                            Age = 35,
                            CntyId = 1,
                            CtyId = 3,
                            Email = "cnoice2@wisc.edu",
                            FirstName = "Creigh",
                            Gender = "Male",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Noice",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Shoshone",
                            Phone = "934-181-5000",
                            StateId = 1
                        },
                        new
                        {
                            MemberId = 4,
                            Age = 67,
                            CntyId = 3,
                            CtyId = 10,
                            Email = "dhourihane3@toplist.cz",
                            FirstName = "Denis",
                            Gender = "Male",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Hourihane",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "American Indian and Alaska Native (AIAN)",
                            Phone = "260-684-7945",
                            StateId = 10
                        },
                        new
                        {
                            MemberId = 5,
                            Age = 62,
                            CntyId = 1,
                            CtyId = 2,
                            Email = "anattriss4@baidu.com",
                            FirstName = "Ariel",
                            Gender = "Male",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Nattriss",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Chickasaw",
                            Phone = "662-951-7611",
                            StateId = 2
                        },
                        new
                        {
                            MemberId = 6,
                            Age = 35,
                            CntyId = 4,
                            CtyId = 7,
                            Email = "tvelte5@nps.gov",
                            FirstName = "Tommie",
                            Gender = "Male",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Velte",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Filipino",
                            Phone = "474-732-2163",
                            StateId = 8
                        },
                        new
                        {
                            MemberId = 7,
                            Age = 40,
                            CntyId = 1,
                            CtyId = 3,
                            Email = "dgonzales6@yelp.com",
                            FirstName = "Dennison",
                            Gender = "Male",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Gonzales",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Puerto Rican",
                            Phone = "706-580-3696",
                            StateId = 1
                        },
                        new
                        {
                            MemberId = 8,
                            Age = 56,
                            CntyId = 3,
                            CtyId = 10,
                            Email = "tmorphet7@wix.com",
                            FirstName = "Tynan",
                            Gender = "Non-binary",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Morphet",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "White",
                            Phone = "298-108-6587",
                            StateId = 10
                        },
                        new
                        {
                            MemberId = 9,
                            Age = 33,
                            CntyId = 2,
                            CtyId = 11,
                            Email = "mfoulstone8@narod.ru",
                            FirstName = "Mischa",
                            Gender = "Male",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Foulstone",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Menominee",
                            Phone = "853-913-7659",
                            StateId = 11
                        },
                        new
                        {
                            MemberId = 10,
                            Age = 49,
                            CntyId = 1,
                            CtyId = 9,
                            Email = "lolczak9@spiegel.de",
                            FirstName = "Lisa",
                            Gender = "Female",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Olczak",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Vietnamese",
                            Phone = "225-320-9656",
                            StateId = 2
                        },
                        new
                        {
                            MemberId = 11,
                            Age = 38,
                            CntyId = 2,
                            CtyId = 11,
                            Email = "rgenningsa@bloglines.com",
                            FirstName = "Rancell",
                            Gender = "Genderfluid",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Gennings",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Tlingit-Haida",
                            Phone = "594-235-3927",
                            StateId = 11
                        },
                        new
                        {
                            MemberId = 12,
                            Age = 18,
                            CntyId = 1,
                            CtyId = 2,
                            Email = "kmonganb@1und1.de",
                            FirstName = "Kingsly",
                            Gender = "Male",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Mongan",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Yaqui",
                            Phone = "805-257-2819",
                            StateId = 2
                        },
                        new
                        {
                            MemberId = 13,
                            Age = 55,
                            CntyId = 2,
                            CtyId = 11,
                            Email = "sortellsc@yelp.com",
                            FirstName = "Sayer",
                            Gender = "Male",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Ortells",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Honduran",
                            Phone = "201-214-9764",
                            StateId = 11
                        },
                        new
                        {
                            MemberId = 14,
                            Age = 32,
                            CntyId = 4,
                            CtyId = 7,
                            Email = "aknotted@apache.org",
                            FirstName = "Abbie",
                            Gender = "Male",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Knotte",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Argentinian",
                            Phone = "870-289-5196",
                            StateId = 9
                        },
                        new
                        {
                            MemberId = 15,
                            Age = 90,
                            CntyId = 4,
                            CtyId = 7,
                            Email = "vputtrelle@nytimes.com",
                            FirstName = "Vilma",
                            Gender = "Polygender",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Puttrell",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Laotian",
                            Phone = "176-399-0215",
                            StateId = 9
                        },
                        new
                        {
                            MemberId = 16,
                            Age = 71,
                            CntyId = 1,
                            CtyId = 3,
                            Email = "abufferyf@jalbum.net",
                            FirstName = "Amber",
                            Gender = "Female",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Buffery",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Chilean",
                            Phone = "716-926-5332",
                            StateId = 1
                        },
                        new
                        {
                            MemberId = 17,
                            Age = 64,
                            CntyId = 1,
                            CtyId = 4,
                            Email = "wcolletg@a8.net",
                            FirstName = "Wiatt",
                            Gender = "Male",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Collet",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Chilean",
                            Phone = "369-361-2111",
                            StateId = 4
                        },
                        new
                        {
                            MemberId = 18,
                            Age = 18,
                            CntyId = 1,
                            CtyId = 9,
                            Email = "cgilstinh@ucla.edu",
                            FirstName = "Cacilia",
                            Gender = "Female",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Gilstin",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Cree",
                            Phone = "582-143-5937",
                            StateId = 2
                        },
                        new
                        {
                            MemberId = 19,
                            Age = 53,
                            CntyId = 4,
                            CtyId = 7,
                            Email = "lzecchiii@domainmarket.com",
                            FirstName = "Libbie",
                            Gender = "Female",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Zecchii",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Paiute",
                            Phone = "529-137-4269",
                            StateId = 9
                        },
                        new
                        {
                            MemberId = 20,
                            Age = 46,
                            CntyId = 3,
                            CtyId = 10,
                            Email = "clessliej@boston.com",
                            FirstName = "Cecilia",
                            Gender = "Female",
                            LangId = 0,
                            LangRead1 = 0,
                            LangWrite1 = 0,
                            LastName = "Lesslie",
                            MemberApproval = "Pending",
                            MemberDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nationality = "Tongan",
                            Phone = "358-511-7422",
                            StateId = 10
                        });
                });

            modelBuilder.Entity("WebAppLexicon.Models.Members.SkillCats", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Categories")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.ToTable("SkillCats");

                    b.HasData(
                        new
                        {
                            SkillId = 1,
                            Categories = "Cleaning"
                        },
                        new
                        {
                            SkillId = 2,
                            Categories = "Moving"
                        },
                        new
                        {
                            SkillId = 3,
                            Categories = "Carpentry"
                        },
                        new
                        {
                            SkillId = 4,
                            Categories = "Car washing"
                        },
                        new
                        {
                            SkillId = 5,
                            Categories = "Pets Care"
                        },
                        new
                        {
                            SkillId = 6,
                            Categories = "Baby Sitting"
                        },
                        new
                        {
                            SkillId = 7,
                            Categories = "Story telling"
                        },
                        new
                        {
                            SkillId = 8,
                            Categories = "Lundary"
                        },
                        new
                        {
                            SkillId = 9,
                            Categories = "Simple Cooking"
                        },
                        new
                        {
                            SkillId = 10,
                            Categories = "Baking"
                        },
                        new
                        {
                            SkillId = 11,
                            Categories = "House Party Decoration"
                        },
                        new
                        {
                            SkillId = 12,
                            Categories = "Magic Show for Kids"
                        },
                        new
                        {
                            SkillId = 13,
                            Categories = "Panio"
                        },
                        new
                        {
                            SkillId = 14,
                            Categories = "Teach Panio"
                        },
                        new
                        {
                            SkillId = 999,
                            Categories = "Others"
                        });
                });

            modelBuilder.Entity("WebAppLexicon.Models.Skills", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<string>("ChargeUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("MinUnit")
                        .HasColumnType("int");

                    b.Property<string>("SkillDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<int>("SkillYears")
                        .HasColumnType("int");

                    b.HasKey("MemberId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            MemberId = 9,
                            SkillId = 1,
                            Charges = 0,
                            ID = 1,
                            MinUnit = 0,
                            SkillLevel = 2,
                            SkillYears = 2
                        },
                        new
                        {
                            MemberId = 3,
                            SkillId = 2,
                            Charges = 0,
                            ID = 2,
                            MinUnit = 0,
                            SkillLevel = 3,
                            SkillYears = 1
                        },
                        new
                        {
                            MemberId = 13,
                            SkillId = 3,
                            Charges = 0,
                            ID = 3,
                            MinUnit = 0,
                            SkillLevel = 1,
                            SkillYears = 7
                        },
                        new
                        {
                            MemberId = 11,
                            SkillId = 6,
                            Charges = 0,
                            ID = 6,
                            MinUnit = 0,
                            SkillLevel = 3,
                            SkillYears = 9
                        },
                        new
                        {
                            MemberId = 7,
                            SkillId = 2,
                            Charges = 0,
                            ID = 7,
                            MinUnit = 0,
                            SkillLevel = 3,
                            SkillYears = 4
                        },
                        new
                        {
                            MemberId = 6,
                            SkillId = 3,
                            Charges = 0,
                            ID = 9,
                            MinUnit = 0,
                            SkillLevel = 2,
                            SkillYears = 2
                        },
                        new
                        {
                            MemberId = 7,
                            SkillId = 10,
                            Charges = 0,
                            ID = 10,
                            MinUnit = 0,
                            SkillLevel = 2,
                            SkillYears = 2
                        });
                });

            modelBuilder.Entity("WebAppLexicon.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CntyId")
                        .HasColumnType("int");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CityId");

                    b.HasIndex("CntyId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            CntyId = 1,
                            StateName = "Kronoberg"
                        },
                        new
                        {
                            StateId = 2,
                            CntyId = 1,
                            StateName = "Skåne"
                        },
                        new
                        {
                            StateId = 3,
                            CntyId = 1,
                            StateName = "Uppsala"
                        },
                        new
                        {
                            StateId = 4,
                            CntyId = 1,
                            StateName = "Gäveborg"
                        },
                        new
                        {
                            StateId = 5,
                            CntyId = 1,
                            StateName = "Stockholm"
                        },
                        new
                        {
                            StateId = 6,
                            CntyId = 1,
                            StateName = "Gotland"
                        },
                        new
                        {
                            StateId = 7,
                            CntyId = 4,
                            StateName = "Berlin"
                        },
                        new
                        {
                            StateId = 8,
                            CntyId = 4,
                            StateName = "Bavaria"
                        },
                        new
                        {
                            StateId = 9,
                            CntyId = 4,
                            StateName = "Hamburg"
                        },
                        new
                        {
                            StateId = 10,
                            CntyId = 3,
                            StateName = "Lazio"
                        },
                        new
                        {
                            StateId = 11,
                            CntyId = 2,
                            StateName = "Île‑de‑France"
                        });
                });

            modelBuilder.Entity("WebAppLexicon.Models.Identity.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("UserRolesId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "39d7cb72-e5bc-4b20-853b-7347807967a4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "60cf50f4-756c-496d-b3db-d9e0c442fc3b",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEM9UZ9r77B3KOEkHxkcbYybXdyHNqlgAW5vbOR/cjnhC4L9pUWi5A9xDv5Prr6NbmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a02503a0-a8d8-44c2-bf6f-8fbd48e69e92",
                            TwoFactorEnabled = false,
                            UserName = "SuperAdmin",
                            FirstName = "Louis",
                            LastName = "Lim",
                            MemberId = 9999,
                            UserRolesId = "20752ede-51cd-4e7e-bdd3-f01c21954cfa"
                        },
                        new
                        {
                            Id = "2e9fbde5-f4d2-4dd6-8792-28952b09e038",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2088fb83-a7d2-4db2-9656-041f3a8d0f21",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ10tAm/MCy4gt6+/Pe3v8MZtClTFBJcA3BaP5KhN7FGYoCKERwwv7ClnKPqFzqlLQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd8c205d-f88d-4cfb-98ba-af7c999d8050",
                            TwoFactorEnabled = false,
                            UserName = "Admin",
                            FirstName = "Vicient",
                            LastName = "Hook",
                            MemberId = 9998,
                            UserRolesId = "5666cfb4-2952-457c-a9d1-b86e6c650444"
                        },
                        new
                        {
                            Id = "00550930-2568-4d0e-ab1f-959f64204b74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9615feb9-b5f0-4f40-8fc0-516b435b3fcf",
                            Email = "user1@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEGlMIGWztGEbsl65zSEsumSpLcTdN/6dq3Bg27WMhmHE9JwwZIx77DwWNc1AfxDVrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c98bfea6-2d83-4457-9e3d-8903b2816b23",
                            TwoFactorEnabled = false,
                            UserName = "User1",
                            FirstName = "Vicient",
                            LastName = "Kent",
                            MemberId = 0,
                            UserRolesId = "492f65c5-5347-4791-9c40-9672c8524ee9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppLexicon.Models.City", b =>
                {
                    b.HasOne("WebAppLexicon.Models.State", "States")
                        .WithMany("Cities")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("WebAppLexicon.Models.Jobs", b =>
                {
                    b.HasOne("WebAppLexicon.Models.Skills", "Skills")
                        .WithMany()
                        .HasForeignKey("SkillsMemberId", "SkillsSkillId");
                });

            modelBuilder.Entity("WebAppLexicon.Models.Members.Members", b =>
                {
                    b.HasOne("WebAppLexicon.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("WebAppLexicon.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryCntyId");

                    b.HasOne("WebAppLexicon.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppLexicon.Models.Skills", b =>
                {
                    b.HasOne("WebAppLexicon.Models.Members.Members", "Xmembers")
                        .WithMany("SkillSet")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppLexicon.Models.Members.SkillCats", "SkillCat")
                        .WithMany("Skills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAppLexicon.Models.State", b =>
                {
                    b.HasOne("WebAppLexicon.Models.City", null)
                        .WithMany("StateList")
                        .HasForeignKey("CityId");

                    b.HasOne("WebAppLexicon.Models.Country", "Countries")
                        .WithMany("States")
                        .HasForeignKey("CntyId");
                });
#pragma warning restore 612, 618
        }
    }
}
